/*
 * Copyright (C) 2012 Texas Instruments Incorporated - http://www.ti.com/
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */
/dts-v1/;

#include "am33xx.dtsi"

/* YK - EISSBox3 is not a bone. No Cape Manager
 * Everything is in this file
#include "am335x-bone-common.dtsi"
*/

/ {
	model = "TI AM3352 EISSBox3";
	compatible = "ti,am335x-bone", "ti,am33xx";
	
	cpus {
		cpu@0 {
			cpu0-supply = <&dcdc2_reg>;
			operating-points = <
				/* kHz    uV */
				1000000 1350000
				800000  1300000
				720000  1285000
				600000  1225000
				500000  1125000
				275000  1125000
			>;
		};
	};
	
	chosen {
		stdin-path = &uart0;
		stdout-path = &uart0;
		/* tick-timer = &timer2; */
	};

	memory {
		device_type = "memory";
		reg = <0x80000000 0x20000000>; /* 512 MB */
	};

	leds {
		pinctrl-names = "default";
		pinctrl-0 = <&led_pins>;

		compatible = "gpio-leds";

		led0 {
			label = "eissbox3:blue:cpu";
			gpios = <&gpio2 22 GPIO_ACTIVE_HIGH>;
			linux,default-trigger = "cpu0";
			default-state = "on";
		};

		led1 {
			label = "eissbox3:blue:heartbeat";
			gpios = <&gpio2 23 GPIO_ACTIVE_HIGH>;
			linux,default-trigger = "heartbeat";
			default-state = "on";
		};

		led2 {
			label = "eissbox3:blue:mmc0";
			gpios = <&gpio2 24 GPIO_ACTIVE_HIGH>;
			linux,default-trigger = "mmc0";
			default-state = "on";
		};

		led3 {
			label = "eissbox3:blue:mmc1";
			gpios = <&gpio2 25 GPIO_ACTIVE_HIGH>;
			linux,default-trigger = "mmc1";
			default-state = "on";
		};
	};

	vmmcsd_fixed: fixedregulator@0 {
		compatible = "regulator-fixed";
		regulator-name = "vmmcsd_fixed";
		regulator-min-microvolt = <3300000>;
		regulator-max-microvolt = <3300000>;
	};

};


&am33xx_pinmux {
	dout_pins: pinmux_dout_pins {												
		pinctrl-single,pins = <												
			0xC0 (PIN_OUTPUT | MUX_MODE7) /* DOUT0, #78 */
			0xC4 (PIN_OUTPUT | MUX_MODE7) /* DOUT1, #79 */
			0xC8 (PIN_OUTPUT | MUX_MODE7) /* DOUT2, #80 */
			0xCC (PIN_OUTPUT | MUX_MODE7) /* DOUT3, #81 */
		>;												
	};												

	boot_pins: pinmux_boot_pins {											
		pinctrl-single,pins = <											
			0xA0 (PIN_INPUT | SLEWCTRL_FAST | MUX_MODE7) /* BOOT0, #70 */
			0xA4 (PIN_INPUT | SLEWCTRL_FAST | MUX_MODE7) /* BOOT1, #71 */
			0xA8 (PIN_INPUT | SLEWCTRL_FAST | MUX_MODE7) /* BOOT2, #72 */
			0xAC (PIN_INPUT | SLEWCTRL_FAST | MUX_MODE7) /* BOOT3, #73 */
			0xB0 (PIN_INPUT | SLEWCTRL_FAST | MUX_MODE7) /* BOOT4, #74 */
			0xB4 (PIN_INPUT | SLEWCTRL_FAST | MUX_MODE7) /* BOOT5, #75 */
			0xB8 (PIN_INPUT | SLEWCTRL_FAST | MUX_MODE7) /* BOOT6, #76 */
			0xBC (PIN_INPUT | SLEWCTRL_FAST | MUX_MODE7) /* BOOT7, #77 */
			0xD0 (PIN_INPUT | SLEWCTRL_FAST | MUX_MODE7) /* BOOT12, #8 */
			0xD4 (PIN_INPUT | SLEWCTRL_FAST | MUX_MODE7) /* BOOT13, #9 */
			0xD8 (PIN_INPUT | SLEWCTRL_FAST | MUX_MODE7) /* BOOT14, #10 */
			0xDC (PIN_INPUT | SLEWCTRL_FAST | MUX_MODE7) /* BOOT15, #11 */
		>;											
	};											

	led_pins: pinmux_userled_pins {
		pinctrl-single,pins = <											
			0xE0 (PIN_OUTPUT | MUX_MODE7) /* LED0, #86 */
			0xE4 (PIN_OUTPUT | MUX_MODE7) /* LED1, #87 */
			0xE8 (PIN_OUTPUT | MUX_MODE7) /* LED2, #88 */
			0xEC (PIN_OUTPUT | MUX_MODE7) /* LED3, #89 */
		>;											
	};											

	uart0_pins: pinmux_uart0_pins {
		pinctrl-single,pins = <
			0x170 (PIN_INPUT_PULLUP | MUX_MODE0)	/* uart0_rxd */
			0x174 (PIN_OUTPUT_PULLDOWN | MUX_MODE0)	/* uart0_txd */
		>;
	};

	rs485_pins: pinmux_rs485_pins {
		pinctrl-single,pins = <											
			0x180 (PIN_INPUT | SLEWCTRL_FAST | MUX_MODE0)  /* RS485 - uart1_rxd */
			0x184 (PIN_OUTPUT | SLEWCTRL_FAST | MUX_MODE0) /* RS485 - uart1_txd */
		>;											
	};											

	din_pins: pinmux_din_pins {
		pinctrl-single,pins = <											
			0x190 (PIN_INPUT_PULLDOWN | SLEWCTRL_FAST | MUX_MODE7) /* DIN0, #110 */
			0x194 (PIN_INPUT_PULLDOWN | SLEWCTRL_FAST | MUX_MODE7) /* DIN1, #111 */
			0x198 (PIN_INPUT_PULLDOWN | SLEWCTRL_FAST | MUX_MODE7) /* DIN2, #112 */
			0x19C (PIN_INPUT_PULLDOWN | SLEWCTRL_FAST | MUX_MODE7) /* DIN3, #113 */
			0x30  (PIN_INPUT_PULLDOWN | SLEWCTRL_FAST | MUX_MODE7) /* DIN4, #44 */
			0x34  (PIN_INPUT_PULLDOWN | SLEWCTRL_FAST | MUX_MODE7) /* DIN5, #45 */
			0x38  (PIN_INPUT_PULLDOWN | SLEWCTRL_FAST | MUX_MODE7) /* DIN6, #46 */
			0x3C  (PIN_INPUT_PULLDOWN | SLEWCTRL_FAST | MUX_MODE7) /* DIN7, #47 */
		>;											
	};

	relay_pins: pinmux_relay_pins {
		pinctrl-single,pins = <											
			0x90 (PIN_OUTPUT | SLEWCTRL_FAST | MUX_MODE7) /* Relay0, #66 */
			0x94 (PIN_OUTPUT | SLEWCTRL_FAST | MUX_MODE7) /* Relay1, #67 */
			0x98 (PIN_OUTPUT | SLEWCTRL_FAST | MUX_MODE7) /* Relay2, #68 */
			0x9C (PIN_OUTPUT | SLEWCTRL_FAST | MUX_MODE7) /* Relay3, #69 */
		>;											
	};											

	rtc_pins: pinmux_rtc_pins {
		pinctrl-single,pins = <											
			0x1B0 (PIN_OUTPUT | MUX_MODE7) /* RTC_INT, # - uses DS1307 driver for RTC */
		>;											
	};

	emu2_pins: pinmux_emu2_pins {
		pinctrl-single,pins = <											
			0x1A4 (PIN_INPUT_PULLUP | SLEWCTRL_FAST | MUX_MODE4) /* JTAG_EMU2, #115 */
		>;											
	};											

	clkout2_pin: pinmux_clkout2_pin {
		pinctrl-single,pins = <
			0x1B4 (PIN_OUTPUT_PULLDOWN | MUX_MODE3) /* clkout2 */
		>;
	};

	cpsw_default: cpsw_default {
		pinctrl-single,pins = <
			/* Slave 1 eth0 */

			/* 0x108 (PIN_INPUT | MUX_MODE0)		*/	/* mii1_col */
			/* 0x110 (PIN_INPUT_PULLUP | MUX_MODE0)	*/  /* mii1_rxerr */
			/* 0x10c (PIN_INPUT | MUX_MODE0)		*/	/* mii1_crs */
			
			0x114 (PIN_OUTPUT_PULLDOWN | MUX_MODE2)	/* rgmii1_tctl */
			0x118 (PIN_INPUT_PULLDOWN | MUX_MODE2)	/* rgmii1_rctl */
			0x11C (PIN_OUTPUT_PULLDOWN | MUX_MODE2)	/* rgmii1_td3 */
			0x120 (PIN_OUTPUT_PULLDOWN | MUX_MODE2)	/* rgmii1_td2 */
			0x124 (PIN_OUTPUT_PULLDOWN | MUX_MODE2)	/* rgmii1_td1 */
			0x128 (PIN_OUTPUT_PULLDOWN | MUX_MODE2)	/* rgmii1_td0 */
			0x12C (PIN_OUTPUT_PULLDOWN | MUX_MODE2)	/* rgmii1_tclk */
			0x130 (PIN_INPUT_PULLDOWN | MUX_MODE2)	/* rgmii1_rclk */
			0x134 (PIN_INPUT_PULLDOWN | MUX_MODE2)	/* rgmii1_rd3 */
			0x138 (PIN_INPUT_PULLDOWN | MUX_MODE2)	/* rgmii1_rd2 */
			0x13C (PIN_INPUT_PULLDOWN | MUX_MODE2)	/* rgmii1_rd1 */
			0x140 (PIN_INPUT_PULLDOWN | MUX_MODE2)	/* rgmii1_rd0 */

			/* Slave 2 eth1 */

			/* 0x70 (PULL_DISABLE | MUX_MODE1) */       /* mii2_crs */
			/* 0x74 (PIN_INPUT_PULLUP | MUX_MODE1) */   /* mii2_rxerr */
			/* 0x78 (PULL_DISABLE | MUX_MODE1) */       /* mii2_col */

			0x40 (PIN_OUTPUT_PULLDOWN | MUX_MODE2) /* rgmii2_tctl */
			0x44 (PIN_INPUT_PULLDOWN | MUX_MODE2)  /* rgmii2_rctl */
			0x48 (PIN_OUTPUT_PULLDOWN | MUX_MODE2) /* rgmii2_td3 */
			0x4C (PIN_OUTPUT_PULLDOWN | MUX_MODE2) /* rgmii2_td2 */
			0x50 (PIN_OUTPUT_PULLDOWN | MUX_MODE2) /* rgmii2_td1 */
			0x54 (PIN_OUTPUT_PULLDOWN | MUX_MODE2) /* rgmii2_td0 */
			0x58 (PIN_OUTPUT_PULLDOWN | MUX_MODE2) /* rgmii2_tclk */
			0x5C (PIN_INPUT_PULLDOWN | MUX_MODE2)  /* rgmii2_rclk */
			0x60 (PIN_INPUT_PULLDOWN | MUX_MODE2)  /* rgmii2_rd3 */
			0x64 (PIN_INPUT_PULLDOWN | MUX_MODE2)  /* rgmii2_rd2 */
			0x68 (PIN_INPUT_PULLDOWN | MUX_MODE2)  /* rgmii2_rd1 */
			0x6C (PIN_INPUT_PULLDOWN | MUX_MODE2)  /* rgmii2_rd0 */
		>;
	};

	cpsw_sleep: cpsw_sleep {
		pinctrl-single,pins = <
			/* Slave 1 eth0 reset value */

			/* 0x108 (PIN_INPUT_PULLDOWN | MUX_MODE7) */
			/* 0x110 (PIN_INPUT_PULLDOWN | MUX_MODE7) */
			/* 0x10c (PIN_INPUT_PULLDOWN | MUX_MODE7) */

			0x114 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x118 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x11c (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x120 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x124 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x128 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x12c (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x130 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x134 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x138 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x13c (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x140 (PIN_INPUT_PULLDOWN | MUX_MODE7)

			/* Slave 2 eth0 reset value*/

			/* 0x70 (PIN_INPUT_PULLDOWN | MUX_MODE7) */
			/* 0x74 (PIN_INPUT_PULLDOWN | MUX_MODE7) */
			/* 0x78 (PIN_INPUT_PULLDOWN | MUX_MODE7) */

			0x40 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x44 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x48 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x4c (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x50 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x54 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x58 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x5c (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x60 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x64 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x68 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x6c (PIN_INPUT_PULLDOWN | MUX_MODE7)
		>;
	};

	davinci_mdio_default: davinci_mdio_default {
		pinctrl-single,pins = <
			/* MDIO */
			0x148 (PIN_INPUT_PULLUP | SLEWCTRL_FAST | MUX_MODE0) /* mdio_data */
			0x14C (PIN_OUTPUT_PULLUP | MUX_MODE0)                /* mdio_clk */
		>;
	};

	davinci_mdio_sleep: davinci_mdio_sleep {
		pinctrl-single,pins = <
			/* MDIO reset value */
			0x148 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x14C (PIN_INPUT_PULLDOWN | MUX_MODE7)
		>;
	};

	test_pins: pinmux_test_pins {
		pinctrl-single,pins = <											
			0x1A0 (PIN_INPUT_PULLDOWN | SLEWCTRL_FAST | MUX_MODE7) /* TP41, #114 */
			0x1AC (PIN_INPUT_PULLDOWN | SLEWCTRL_FAST | MUX_MODE7) /* TP36, #117 */
			0x154 (PIN_INPUT_PULLDOWN | SLEWCTRL_FAST | MUX_MODE7) /* TP32, #3 */
			0x150 (PIN_INPUT_PULLDOWN | SLEWCTRL_FAST | MUX_MODE7) /* TP31, #2 */
			0x16C (PIN_INPUT_PULLDOWN | SLEWCTRL_FAST | MUX_MODE7) /* TP33, #41 */
			0x178 (PIN_INPUT_PULLDOWN | SLEWCTRL_FAST | MUX_MODE7) /* TP34, #12 i2c2!! */
			0x17C (PIN_INPUT_PULLDOWN | SLEWCTRL_FAST | MUX_MODE7) /* TP35, #13 i2c2!! */
			0x120 (PIN_INPUT_PULLDOWN | SLEWCTRL_FAST | MUX_MODE7) /* TP23, #22 */
			0x124 (PIN_INPUT_PULLDOWN | SLEWCTRL_FAST | MUX_MODE7) /* TP24, #23 */
			0x128 (PIN_INPUT_PULLDOWN | SLEWCTRL_FAST | MUX_MODE7) /* TP25, #26 */
			0x12C (PIN_INPUT_PULLDOWN | SLEWCTRL_FAST | MUX_MODE7) /* TP26, #27 */
			0x188 (PIN_INPUT_PULLDOWN | SLEWCTRL_FAST | MUX_MODE7) /* TP29, #64 */
		>;											
	};											

	i2c0_pins: pinmux_i2c0_pins {
		pinctrl-single,pins = <
			0x188 (PIN_INPUT_PULLUP | MUX_MODE0) /* i2c0_sda */
			0x18C (PIN_INPUT_PULLUP | MUX_MODE0) /* i2c0_scl */
		>;
	};

	i2c1_pins: pinmux_i2c1_pins {
		pinctrl-single,pins = <
			0x158 (PIN_INPUT_PULLUP | MUX_MODE2) /* i2c1_sda */
			0x15C (PIN_INPUT_PULLUP | MUX_MODE2) /* i2c1_scl */
		>;
	};

/*
	i2c2_pins: pinmux_i2c2_pins {
		pinctrl-single,pins = <
			0x178 (PIN_INPUT_PULLUP | MUX_MODE3) /* i2c2_sda */
/*			0x17C (PIN_INPUT_PULLUP | MUX_MODE3) /* i2c2_scl */
/*		>;
	};
*/
	emmc_rst_pins: pinmux_emmc_rst_pins {
		pinctrl-single,pins = <											
			0x7C (PIN_OUTPUT | SLEWCTRL_FAST | MUX_MODE7) /* EMMC_RST_INT, #61 */
		>;											
	};											

	emmc_pins: pinmux_emmc_pins {
		pinctrl-single,pins = <
			0x80 (PIN_INPUT_PULLUP | SLEWCTRL_FAST | MUX_MODE2) /* mmc1_clk */
			0x84 (PIN_INPUT_PULLUP | SLEWCTRL_FAST | MUX_MODE2) /* mmc1_cmd */
			0x00 (PIN_INPUT_PULLUP | SLEWCTRL_FAST | MUX_MODE1) /* mmc1_dat0 */
			0x04 (PIN_INPUT_PULLUP | SLEWCTRL_FAST | MUX_MODE1) /* mmc1_dat1 */
			0x08 (PIN_INPUT_PULLUP | SLEWCTRL_FAST | MUX_MODE1) /* mmc1_dat2 */
			0x0C (PIN_INPUT_PULLUP | SLEWCTRL_FAST | MUX_MODE1) /* mmc1_dat3 */
			0x10 (PIN_INPUT_PULLUP | SLEWCTRL_FAST | MUX_MODE1) /* mmc1_dat4 */
			0x14 (PIN_INPUT_PULLUP | SLEWCTRL_FAST | MUX_MODE1) /* mmc1_dat5 */
			0x18 (PIN_INPUT_PULLUP | SLEWCTRL_FAST | MUX_MODE1) /* mmc1_dat6 */
			0x1C (PIN_INPUT_PULLUP | SLEWCTRL_FAST | MUX_MODE1) /* mmc1_dat7 */
		>;
	};

	sdcard_pins: pinmux_mmc1_pins {
		pinctrl-single,pins = <
			0x100 (PIN_INPUT | MUX_MODE0) /* mmc0_clk */
			0x104 (PIN_INPUT | MUX_MODE0) /* mmc0_cmd */
			0xF0  (PIN_INPUT | MUX_MODE0) /* mmc0_dat0 */
			0xF4  (PIN_INPUT | MUX_MODE0) /* mmc0_dat1 */
			0xF8  (PIN_INPUT | MUX_MODE0) /* mmc0_dat2 */
			0xFC  (PIN_INPUT | MUX_MODE0) /* mmc0_dat3 */
			0x160 (PIN_INPUT | MUX_MODE7) /* uSD, GPIO0_6 */
		>;
	};

};

&rtc {
	status = "disabled";
};

&uart0 {
	pinctrl-names = "default";
	pinctrl-0 = <&uart0_pins>;
	status = "okay";
};

&uart1 {
	pinctrl-names = "default";
	pinctrl-0 = <&rs485_pins>;
	status = "okay";
};

&usb {
	status = "okay";
};

&usb_ctrl_mod {
	status = "okay";
};

&usb0_phy {
	status = "okay";
};

&usb1_phy {
	status = "okay";
};

&usb0 {
	status = "okay";
	dr_mode = "peripheral";
	interrupts-extended = <&intc 18 &tps 0>;
	interrupt-names = "mc", "vbus";
};

&usb1 {
	status = "okay";
	dr_mode = "host";
};

&cppi41dma  {
	status = "okay";
};

&i2c0 {
	status = "okay";
	clock-frequency = <400000>;
	pinctrl-names = "default";
	pinctrl-0 = <&i2c0_pins>;

	tps: tps@24 {
		reg = <0x24>;
	};
};

&i2c1 {
	status = "okay";
	clock-frequency = <100000>;
	pinctrl-names = "default";
	pinctrl-0 = <&i2c1_pins>;

	rtc@68 {
		compatible = "dallas,ds1307"; /* DS1307 RTC module */
		reg = <0x68>;
	};
};

&i2c2 {
	status = "disabled";
};

/*
 * eth0, eth1
 */
&mac {
	status = "okay";
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&cpsw_default>;
	pinctrl-1 = <&cpsw_sleep>;
	dual_emac;
};

&davinci_mdio {
	status = "okay";
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&davinci_mdio_default>;
	pinctrl-1 = <&davinci_mdio_sleep>;
};

&cpsw_emac0 {
	phy_id = <&davinci_mdio>, <0>;
	phy-mode = "rgmii-txid";
	dual_emac_res_vlan = <1>;
};

&cpsw_emac1 {
	phy_id = <&davinci_mdio>, <1>;
	phy-mode = "rgmii-txid";
	dual_emac_res_vlan = <2>;
};

/*
 * uSD Card
 */
&mmc1 {
	status = "okay";
	vmmc-supply = <&vmmcsd_fixed>;
	pinctrl-names = "default";
	pinctrl-0 = <&sdcard_pins>;
	bus-width = <0x4>;
	cd-gpios = <&gpio0 6 GPIO_ACTIVE_LOW>;
};

/*
 * eMMC
 */
&mmc2 {
	status = "okay";
	vmmc-supply = <&vmmcsd_fixed>;
	pinctrl-names = "default";
	pinctrl-0 = <&emmc_pins>;
	bus-width = <8>;
	ti,non-removable;
};

&aes {
	status = "okay";
};

&sham {
	status = "okay";
};

/include/ "tps65217.dtsi"

&tps {
	/*
	 * Configure pmic to enter OFF-state instead of SLEEP-state ("RTC-only
	 * mode") at poweroff.  Most BeagleBone versions do not support RTC-only
	 * mode and risk hardware damage if this mode is entered.
	 *
	 * For details, see linux-omap mailing list May 2015 thread
	 *	[PATCH] ARM: dts: am335x-bone* enable pmic-shutdown-controller
	 * In particular, messages:
	 *	http://www.spinics.net/lists/linux-omap/msg118585.html
	 *	http://www.spinics.net/lists/linux-omap/msg118615.html
	 *
	 * You can override this later with
	 *	&tps {  /delete-property/ ti,pmic-shutdown-controller;  }
	 * if you want to use RTC-only mode and made sure you are not affected
	 * by the hardware problems. (Tip: double-check by performing a current
	 * measurement after shutdown: it should be less than 1 mA.)
	 */
	interrupt-parent = <&intc>;
	interrupts = <7>; /* NNMI */

	ti,pmic-shutdown-controller;

	pwrbutton {
		interrupts = <2>;
		status = "okay";
	};

	regulators {
		dcdc1_reg: regulator@0 {
			regulator-name = "vdds_dpr";
			regulator-always-on;
		};

		dcdc2_reg: regulator@1 {
			/* VDD_MPU voltage limits 0.95V - 1.26V with +/-4% tolerance */
			regulator-name = "vdd_mpu";
			regulator-min-microvolt = <925000>;
			regulator-max-microvolt = <1325000>;
			regulator-boot-on;
			regulator-always-on;
		};

		dcdc3_reg: regulator@2 {
			/* VDD_CORE voltage limits 0.95V - 1.1V with +/-4% tolerance */
			regulator-name = "vdd_core";
			regulator-min-microvolt = <925000>;
			regulator-max-microvolt = <1150000>;
			regulator-boot-on;
			regulator-always-on;
		};

		ldo1_reg: regulator@3 {
			regulator-name = "vio,vrtc,vdds";
			regulator-always-on;
		};

		ldo2_reg: regulator@4 {
			regulator-name = "vdd_3v3aux";
			regulator-always-on;
		};

		ldo3_reg: regulator@5 {
			regulator-name = "vdd_1v8";
			regulator-min-microvolt = <1800000>;
			regulator-max-microvolt = <1800000>;
			regulator-always-on;
		};

		ldo4_reg: regulator@6 {
			regulator-name = "vdd_3v3a";
			regulator-always-on;
		};
	};
};
